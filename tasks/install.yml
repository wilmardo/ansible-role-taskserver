---
- name: INSTALL | Create taskd group
  group:
    name: "{{ taskd_group }}"
    state: present

- name: INSTALL | Create taskd user
  user:
    name: "{{ taskd_user }}"
    group: "{{ taskd_group }}"
    state: present
    createhome: no

#TODO: make more efficient, only download and make when version diffrent?
- name: INSTALL | Download taskd-server tarball (No SSL validate due lack of SNI support)
  get_url:
    url: "https://{{ taskd_tarball_url }}"
    dest: "{{ taskd_download_location }}/taskd-latest.tar.gz"
    checksum: "{{ taskd_tarball_checksum }}"
    validate_certs: no
  when: (ansible_distribution == 'Debian' and ansible_distribution_version|int == 7) or (ansible_distribution == 'Ubuntu' and ansible_distribution_version|int <= 14.04)

- name: INSTALL | Download taskd-server tarball
  get_url:
    url: "https://{{ taskd_tarball_url }}"
    dest: "{{ taskd_download_location }}/taskd-latest.tar.gz"
    checksum: "{{ taskd_tarball_checksum }}"

- name: INSTALL | Create install directory
  file:
    path: "{{ taskd_install_location }}"
    owner: "{{ taskd_user }}"
    group: "{{ taskd_group }}"
    mode: 0755
    state: directory

- name: INSTALL | Untar taskd-server tarball
  unarchive:
    src: "{{ taskd_download_location }}/taskd-latest.tar.gz"
    dest: "{{ taskd_install_location }}"
    remote_src: true
    extra_opts: ['--strip-components=1']

- name: INSTALL | Remove packed taskd-server tarball
  file:
    path: "{{ taskd_download_location }}/taskd-latest.tar.gz"
    state: absent

- name: INSTALL | Cmake taskd-server
  command: cmake -DCMAKE_BUILD_TYPE=release .
  args:
    chdir: "{{ taskd_install_location }}"

- name: INSTALL | Make taskd-server
  command: make
  args:
    chdir: "{{ taskd_install_location }}"

- name: INSTALL | Make install taskd-server
  command: make install
  args:
    chdir: "{{ taskd_install_location }}"

- name: INSTALL | Set file permissions in the install folder
  file:
    dest: "{{ taskd_install_location }}"
    owner: "{{ taskd_user }}"
    group: "{{ taskd_group }}"
    recurse: yes

- name: INSTALL | Set permanent TASKDDATA variable
  lineinfile:
    path: "/etc/environment"
    line: "TASKDDATA={{ taskd_data_location }}"
    regexp: "^TASKDDATA="
    state: present
    insertafter: eof

- name: INSTALL | Set TASKDDATA for current shell
  shell: "export TASKDDATA={{ taskd_data_location }}


- block:
    - name: SETUP | Move systemd script
      template:
        src: taskd.service.jinja2
        dest: /lib/systemd/system/taskd.service
        owner: root
        group: root
        mode: 0644

    - name: SETUP | Autostart taskd and restart service
      systemd:
        name: taskd
        enabled: yes
        daemon_reload: yes
      notify: restart taskd

  when: (ansible_distribution == 'Ubuntu' and ansible_distribution_version >= '16.04') or (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7')

#TODO: Make init-script
- block:
    - name: SETUP | Move init script for CentOS 6
      file:
        src: taskd/taskd-init.jinja2"
        dest: /etc/init.d/taskd
        owner: root
        group: root
        mode: 0744
        state: link

    - name: SETUP | Autostart taskd and restart service
      service:
        name: taskd
        enabled: yes
      notify: restart taskd

  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version == '6'

#TODO: PR this to taskwarrior
- block:
    - name: INSTALL | Create symlink for taskdctl to standard CentOS $PATH dir
      file:
        src: /usr/local/bin/taskd
        path: /usr/bin/taskd
        state: link

    - name: INSTALL | Create symlink for taskd to standard CentOS $PATH dir
      file:
        src: /usr/local/bin/taskdctl
        path: /usr/bin/taskdctl
        state: link

  when: ansible_distribution == 'CentOS'